/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ (() => {

eval("const apiKey = \"dff57f39-d4f1-4f0f-b008-c8d21e110918\"; //assigning API key to a variable \n\nconsole.log(`API KEY: ${apiKey}`); //logging API key just for testing \n\n//asynce function \nconst fetchTeams = async () => {\n    const url = \"https://api.balldontlie.io/v1/teams/\"; // API endpoint\n\n    //starting the try and catch\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'Authorization': apiKey \n            }\n        });\n\n    //logging the HTTP response status code\n    console.log('Response Status:', response.status);\n\n    //logging the status tex\n    console.log('Response Status Text:', response.statusText);\n\n    //check if the response is ok\n    if(!response.ok){\n        throw new Error('Error');\n    }\n    \n    //assigning the response JSON file to a variable \n    const data = await response.json();\n\n    //access the data from the JSON\n    const teams = data.data;\n    \n    //variable to handle HTML list \n    const teamList = document.getElementById('team-list');\n\n    //setting the variable to and empty string\n    teamList.innerHTML = '';\n\n    //only taking the first 30 teams returned \n    const firstThirtyTeams = teams.slice(0 ,30);\n\n    //loop through array of teams \n    firstThirtyTeams.forEach(team => {\n       //display the team names \n        console.log(`Team Name: ${team.full_name}`);\n\n        //make a new list eleamnet \n        const newItem = document.createElement('li');\n        //assign team name to new list eleaments \n        newItem.innerText = team.full_name;\n        //add new item to list \n        teamList.appendChild(newItem);\n    });\n} catch(error) {\n    console.error('Error', error); //in case of error, log error \n}\n};\n\n//function to get team info\nconst getTeam = async () => {\n    //preventing the page from resetting\n    event.preventDefault();\n\n    //getting value from form and assigning to variable\n    const teamID = document.getElementById('teamIDNumber').value;\n\n    //assigning uri to a variable\n    const url = `https://api.balldontlie.io/v1/teams/${teamID}`\n\n    //what we're going to try \n    try{\n\n        //fetching the info and storing in variable\n        const response = await fetch(url, {\n            headers: {\n                'Authorization': apiKey \n            }\n        });\n\n        //check for error first\n        if(!response.ok){\n            throw new Error('Error');\n        }\n\n        //storing JSON in variable \n        const data = await response.json();\n\n        //storing data from JSON into a variable\n        const team = data.data;\n        //storing HTML element in a variable \n        const teamInfo =  document.getElementById('team-info'); \n\n        //filling the HTML element with data from JSON \n        teamInfo.innerText = `Team Name: ${team.full_name}, City: ${team.city}, ${team.abbreviation}, Division: ${team.division}`\n\n    } catch(error) { //if any errors with catch them here\n        console.error('Error', error); //in case of error, log error \n    }\n}\n\n//async function to get list of players\nconst getPlayers = async () => {\n    //preventing the page from resetting\n    event.preventDefault();\n    \n    //setting up a variable to get use input from form, set it to all lower case\n    const playerName = document.getElementById('playerName').value.toLowerCase();\n\n    //assigning the URI to a variable to use later\n    const url = `https://api.balldontlie.io/v1/players/?search=${playerName}`;\n\n    //setting a try and catch used to fetch data\n    try {\n        //fetching the info and storing in variable\n        const response = await fetch(url, {\n            headers: {\n                'Authorization': apiKey \n            }\n        });\n\n        //check for error first\n        if(!response.ok){\n            throw new Error('Error');\n        }\n\n        //storing JSON in variable \n        const data = await response.json();\n\n        //setting a variable to handle data from JSON\n        const players = data.data;\n\n        //variable to handle HTML list\n        const playerList = document.getElementById('player-list');\n\n        //setting the list to empty to begin\n        playerList.innerHTML = '';\n\n        //creating a forEach loop to loop through the returned Array\n        players.forEach(players => {\n        \n        //make a new list eleamnet \n        const newItem = document.createElement('li');\n        //assign the player names to new list eleaments \n        newItem.innerText = `${players.first_name} ${players.last_name} ID:${players.id}`;\n        //add new item to list \n        playerList.appendChild(newItem);\n        })\n\n        \n    } catch(error) { //if any errors with catch them here\n        console.error('Error', error); //in case of error, log error \n    }\n}\n\n//setting up a variable to handle the button in script\nconst showPlayerForm = document.getElementById('get-player-btn');\n//setting a variable to handle the new div in the script\nconst playerContainer = document.getElementById('player-id-div');\n\n//event lister used to display new div when clicked \nshowPlayerForm.addEventListener('click', () => {\n    \n    //if statment to stop the new div from being loaded more than once \n    if(!document.getElementById('player-id-form')){\n        //creating a new form\n        const playerIdForm = document.createElement('form');\n        //giving the new form and id\n        playerIdForm.setAttribute('id', 'player-id-form')\n        //adding new form to the div\n        playerContainer.appendChild(playerIdForm)\n\n        //creating new lable \n        const playerIdLabel = document.createElement('label');\n        //giving the labe an id\n        playerIdLabel.setAttribute('id', 'player-id-label');\n        //adding text to new lable\n        playerIdLabel.innerText = 'Enter Player ID ';\n        //adding new label to div \n        playerContainer.appendChild(playerIdLabel);\n\n        //creating new input box\n        const playerIdInput = document.createElement('input');\n        //adding an id to new input\n        playerIdInput.setAttribute('id', 'player-id-input');\n        //adding a type to new input\n        playerIdInput.setAttribute('type', 'number');\n        //adding new input box to div\n        playerContainer.appendChild(playerIdInput);\n\n        //creating new button\n        const playerIdButton = document.createElement('button');\n        //adding type to new button\n        playerIdButton.setAttribute('type', 'button');\n        //adding an id to new button\n        playerIdButton.setAttribute('id', 'player-id-button');\n        //adding text to the new button\n        playerIdButton.innerText = 'Player Info';\n        //adding the new button to the new div\n        playerContainer.appendChild(playerIdButton);\n    \n        //creating a new paragraph element to hold player info\n        const playerPara = document.createElement('p');\n\n        playerPara.setAttribute('id', 'player-para')\n        //adding new p element to the div\n        playerContainer.appendChild(playerPara);\n        \n\n    //creating a event lister to new button\n    playerIdButton.addEventListener('click', async () => {\n        //assigning user input to a variable\n        const playerID = playerIdInput.value;\n    \n        //creating a variable to handle the URI\n        const url = `https://api.balldontlie.io/v1/players/${playerID}`;\n    \n        //setting up a try and catch \n        try{\n             //fetching the info and storing in variable\n             const response = await fetch(url, {\n                headers: {\n                    'Authorization': apiKey \n                }\n            });\n             //check for error first\n             if(!response.ok){\n                throw new Error('Error');\n            }\n            //storing JSON in variable \n            const data = await response.json();\n    \n            //logging the data, for testing \n            console.log(data);\n\n            //creating a variable to handle the data from JSON \n            const player = data.data;\n            //assigning text to the new p element created \n            playerPara.innerHTML = `College: ${player.college}<br>Country: ${player.country}<br>Height: ${player.height}<br>Team: ${player.team.full_name} ${player.team.abbreviation}`;\n        }\n        catch(error) { //if any errors with catch them here\n            console.error('Error', error); //in case of error, log error \n        }\n    }\n    )\n}\n});\n\n//make getTeam globally accessible\nwindow.getTeam = getTeam;\n//make fetchTeams globally accessible\nwindow.fetchTeams = fetchTeams;\n//make getPlayer globally accessible\nwindow.getPlayers = getPlayers;\n\n//# sourceURL=webpack://basketballapi-project/./app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app.js"]();
/******/ 	
/******/ })()
;